/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Algorithms.CrypticAlgo;
import Algorithms.CrypticObject;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.Security;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.xml.bind.DatatypeConverter;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeriesCollection;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 *
 * @author Sneh
 */


public class AppGUI extends javax.swing.JFrame {

    /**
     * Creates new form AppGUI
     */
    
   String plainText;
   String technique;
   String algo_used;
   String asym[] = new String[] { "RSA", "ElGamal", "EllipticCurve"};
   String sym[] = new String[] { "BlowFish", "DES", "AES" };
   String hash[] = new String[] {"MD5", "SHA-1"};
   byte encrypted[];
   byte decrypted[];
   byte plainBytes[];
   FileInputStream iStream;
   boolean simMod = true;
   
   long sTime, eTime;
   CrypticObject crypt;
   
   int dataSet[][] = new int[2][10];
   XYSeriesCollection collectEncryption;
   XYSeriesCollection collectDecryption;
   final static int countAlgo = 4;
   String [] algoList = new String[]{"RSA", "AES", "BlowFish", "DES"};
   
   Algorithms.CrypticAlgo algo;
   ApplicationContext context;
   BufferedImage graph;
    public AppGUI() {
        initComponents();
        //context = new ClassPathXmlApplicationContext("spring.xml");
        analPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modulePane = new javax.swing.JLayeredPane();
        analPanel = new javax.swing.JPanel();
        plotGraphButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        asymmetricList = new javax.swing.JList();
        encryptLabel = new javax.swing.JLabel();
        decryptLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        symmetricList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        hashList = new javax.swing.JList();
        asymLabel = new javax.swing.JLabel();
        symLabel = new javax.swing.JLabel();
        hashLabel = new javax.swing.JLabel();
        simPanel = new javax.swing.JPanel();
        plainLabel = new javax.swing.JLabel();
        algoCombo = new javax.swing.JComboBox();
        techniqueCombo = new javax.swing.JComboBox();
        browseButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        techniqueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plainArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherArea = new javax.swing.JTextArea();
        cipherLabel = new javax.swing.JLabel();
        decryptedLabel = new javax.swing.JLabel();
        algoLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        decryptedArea = new javax.swing.JTextArea();
        sizeLabel = new javax.swing.JLabel();
        sizeField = new javax.swing.JTextField();
        eTimeLabel = new javax.swing.JLabel();
        eTimeField = new javax.swing.JTextField();
        eUnitLabel = new javax.swing.JLabel();
        dTimeLabel = new javax.swing.JLabel();
        dTimeField = new javax.swing.JTextField();
        dUnitLabel = new javax.swing.JLabel();
        encLargeButton = new javax.swing.JButton();
        mainMenu = new javax.swing.JMenuBar();
        moduleMenu = new javax.swing.JMenu();
        simItem = new javax.swing.JMenuItem();
        analItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        docItem = new javax.swing.JMenuItem();
        helpItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptoSimulator");
        setBounds(new java.awt.Rectangle(0, 0, 1024, 768));
        setPreferredSize(new java.awt.Dimension(1200, 600));
        setResizable(false);

        plotGraphButton.setText("Plot Graph");
        plotGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotGraphButtonActionPerformed(evt);
            }
        });

        asymmetricList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "RSA", "ElGamal", "Elliptic-Curve" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        asymmetricList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                asymmetricListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(asymmetricList);

        symmetricList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "AES", "BlowFish", "DES" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        symmetricList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                symmetricListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(symmetricList);

        hashList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "MD5", "SHA-1", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        hashList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hashListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(hashList);

        asymLabel.setText("Asymmetric");

        symLabel.setText("Symmetric");

        hashLabel.setText("Hash");

        javax.swing.GroupLayout analPanelLayout = new javax.swing.GroupLayout(analPanel);
        analPanel.setLayout(analPanelLayout);
        analPanelLayout.setHorizontalGroup(
            analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analPanelLayout.createSequentialGroup()
                .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analPanelLayout.createSequentialGroup()
                        .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(plotGraphButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(hashLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(analPanelLayout.createSequentialGroup()
                                    .addGap(20, 20, 20)
                                    .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(asymLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analPanelLayout.createSequentialGroup()
                        .addComponent(symLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addComponent(encryptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(decryptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(229, Short.MAX_VALUE))
        );
        analPanelLayout.setVerticalGroup(
            analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analPanelLayout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(asymLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(analPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(symLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(hashLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(analPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(encryptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(decryptLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(plotGraphButton)
                .addGap(72, 72, 72))
        );

        plainLabel.setText("Plain Text");

        algoCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RSA", "ElGamal", "Elliptic-Curve" }));
        algoCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algoComboActionPerformed(evt);
            }
        });

        techniqueCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Asymmetric", "Symmetric", "Hash", "Quantum" }));
        techniqueCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techniqueComboActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        techniqueLabel.setText(" Cryptography Technique");

        plainArea.setColumns(20);
        plainArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        plainArea.setLineWrap(true);
        plainArea.setRows(5);
        jScrollPane1.setViewportView(plainArea);

        cipherArea.setEditable(false);
        cipherArea.setColumns(20);
        cipherArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        cipherArea.setLineWrap(true);
        cipherArea.setRows(5);
        jScrollPane2.setViewportView(cipherArea);

        cipherLabel.setText("Cipher Text");

        decryptedLabel.setText("Decrypted Text");

        algoLabel.setText("Algorithm");

        decryptedArea.setEditable(false);
        decryptedArea.setColumns(20);
        decryptedArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        decryptedArea.setLineWrap(true);
        decryptedArea.setRows(5);
        jScrollPane3.setViewportView(decryptedArea);

        sizeLabel.setText(" Size of Input (KB)");

        sizeField.setEditable(false);
        sizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeFieldActionPerformed(evt);
            }
        });

        eTimeLabel.setText("Encryption Time");

        eTimeField.setEditable(false);
        eTimeField.setText(" ");
        eTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eTimeFieldActionPerformed(evt);
            }
        });

        eUnitLabel.setText("ms");

        dTimeLabel.setText("Decrypition Time");

        dTimeField.setEditable(false);
        dTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dTimeFieldActionPerformed(evt);
            }
        });

        dUnitLabel.setText("ms");

        encLargeButton.setText("Encrypt Large Files");
        encLargeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encLargeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout simPanelLayout = new javax.swing.GroupLayout(simPanel);
        simPanel.setLayout(simPanelLayout);
        simPanelLayout.setHorizontalGroup(
            simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simPanelLayout.createSequentialGroup()
                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(simPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addComponent(plainLabel)
                                .addGap(231, 231, 231)
                                .addComponent(cipherLabel)
                                .addGap(217, 217, 217)
                                .addComponent(decryptedLabel))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(simPanelLayout.createSequentialGroup()
                                        .addComponent(browseButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(encLargeButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(58, 58, 58)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(simPanelLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addComponent(techniqueLabel)
                                .addGap(10, 10, 10)
                                .addComponent(techniqueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(algoLabel)
                                .addGap(10, 10, 10)
                                .addComponent(algoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(applyButton))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addComponent(sizeLabel)
                                .addGap(18, 18, 18)
                                .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(eTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(eUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        simPanelLayout.setVerticalGroup(
            simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(simPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plainLabel)
                    .addComponent(cipherLabel)
                    .addComponent(decryptedLabel))
                .addGap(6, 6, 6)
                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(simPanelLayout.createSequentialGroup()
                        .addComponent(browseButton)
                        .addGap(59, 59, 59)
                        .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(techniqueLabel))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(techniqueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(algoLabel))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(algoCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(applyButton))
                        .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(simPanelLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(simPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eTimeLabel)
                                    .addComponent(eTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dTimeLabel)
                                    .addComponent(dTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dUnitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(encLargeButton))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        modulePane.setLayer(analPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        modulePane.setLayer(simPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout modulePaneLayout = new javax.swing.GroupLayout(modulePane);
        modulePane.setLayout(modulePaneLayout);
        modulePaneLayout.setHorizontalGroup(
            modulePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modulePaneLayout.createSequentialGroup()
                .addComponent(simPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        modulePaneLayout.setVerticalGroup(
            modulePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(simPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(analPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        moduleMenu.setText("Module");

        simItem.setText("Simulation");
        simItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simItemActionPerformed(evt);
            }
        });
        moduleMenu.add(simItem);

        analItem.setText("Analysis");
        analItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analItemActionPerformed(evt);
            }
        });
        moduleMenu.add(analItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        moduleMenu.add(exitItem);

        mainMenu.add(moduleMenu);

        helpMenu.setText("Help");

        docItem.setText("Documentation");
        helpMenu.add(docItem);

        helpItem.setText("Help");
        helpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpItem);

        mainMenu.add(helpMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(modulePane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(modulePane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetComponents()
    {
        //Reset simPanel
        plainArea.setText("");
        cipherArea.setText("");
        decryptedArea.setText("");
        sizeField.setText("");
        eTimeField.setText("");
        dTimeField.setText("");
        techniqueCombo.setSelectedIndex(0);
        algoCombo.setModel(new DefaultComboBoxModel(asym));
        
        //Reset analPanel
        symmetricList.clearSelection();
        asymmetricList.clearSelection();
        hashList.clearSelection();
        encryptLabel.setIcon(null);
        decryptLabel.setIcon(null);
        
    }
    private void helpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpItemActionPerformed

    private void simItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simItemActionPerformed
        // TODO add your handling code here:
        resetComponents();
        simPanel.setVisible(true);
        analPanel.setVisible(false);
    }//GEN-LAST:event_simItemActionPerformed

    private void analItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analItemActionPerformed
        // TODO add your handling code here:
       
        resetComponents();
        simPanel.setVisible(false);
        analPanel.setVisible(true);
        
    }//GEN-LAST:event_analItemActionPerformed

    private void plotGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotGraphButtonActionPerformed
        int i, j;
        int alen, slen, hlen;
         Object asymmetric[] = asymmetricList.getSelectedValues();
         Object symmetric[] = symmetricList.getSelectedValues();
         Object hash[] = hashList.getSelectedValues();
         alen = asymmetric.length;
         slen = symmetric.length;
         hlen = hash.length;
         String myList[] = new String[alen+slen+hlen];
         
         j=0;
         for(i=0; i<alen; ++i)
             myList[j++] = (String)asymmetric[i];
         for(i=0; i<slen; ++i)
             myList[j++] = (String)symmetric[i];
         for(i=0; i<hlen; ++i)
             myList[j++] = (String)hash[i];
         
        context = new ClassPathXmlApplicationContext("spring.xml");
        collectEncryption = new XYSeriesCollection();
        collectDecryption = new XYSeriesCollection();
        for(i=0; i<myList.length; ++i){
            System.out.println(myList[i]);
            algo = (CrypticAlgo)context.getBean(myList[i]);
            collectEncryption.addSeries(algo.getDataSet());
            collectDecryption.addSeries(algo.getDataSet());
        }
        plotGraphEncryption();
        plotGraphDecryption();
    }//GEN-LAST:event_plotGraphButtonActionPerformed

    private void dTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dTimeFieldActionPerformed

    private void eTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eTimeFieldActionPerformed

    private void sizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sizeFieldActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        
        int beg = 0, end;
        plainText = plainArea.getText();
        int length = plainText.length();
        context = new ClassPathXmlApplicationContext("spring.xml");
        algo_used = algoCombo.getSelectedItem().toString();
        sizeField.setText(""+((float)plainText.length())/1024);
        algo = (CrypticAlgo)context.getBean(algo_used);
        
        /*if(algo == (CrypticAlgo)context.getBean("RSA"))
        {
            sTime = System.currentTimeMillis();
            while(beg < length){
                end = (beg+245>=length)?(length):(beg+245);
                plainBytes = plainText.substring(beg, end).getBytes();
                encrypted = algo.encrypt(plainBytes);
                decrypted = algo.decrypt(encrypted);
                cipherArea.append((""+DatatypeConverter.printHexBinary(encrypted)).toLowerCase());
                decryptedArea.append(new String(decrypted));
                beg += 245;
                
            }
            eTime = System.currentTimeMillis();
            eTimeField.setText(""+(eTime-sTime));
            return;
        }
        if(algo == (CrypticAlgo)context.getBean("ElGamal"))
        {
            sTime = System.currentTimeMillis();
            while(beg < length){
                end = (beg+20>=length)?(length):(beg+20);
                plainBytes = plainText.substring(beg, end).getBytes();
                encrypted = algo.encrypt(plainBytes);
                decrypted = algo.decrypt(encrypted);
                cipherArea.append((""+DatatypeConverter.printHexBinary(encrypted)).toLowerCase());
                decryptedArea.append(new String(decrypted));
                beg += 20;
                
            }
            eTime = System.currentTimeMillis();
            eTimeField.setText(""+(eTime-sTime));
            return;
        }*/
        
        
        
        crypt = algo.encrypt(plainText.getBytes());
        cipherArea.setText((""+DatatypeConverter.printHexBinary(crypt.data)).toLowerCase());
        eTimeField.setText(""+crypt.time);
        
        crypt = algo.decrypt(crypt.data);
        decryptedArea.setText(""+new String(crypt.data));
        dTimeField.setText(""+crypt.time);

    }//GEN-LAST:event_applyButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openTextFile = new JFileChooser();
        int returnVal;
        String line;

        if(evt.getSource() == browseButton){

            returnVal = openTextFile.showOpenDialog(simPanel);
            if(returnVal == JFileChooser.APPROVE_OPTION){
                File file = openTextFile.getSelectedFile();
                /*plainArea.setText("");
                try {
                    BufferedReader reader = new BufferedReader(new FileReader(file.getPath()));
                    while((line = reader.readLine()) != null){
                        plainArea.append(line);
                    }
                    reader.close();
                } catch (FileNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }*/
                try {
                    iStream = new FileInputStream(file);
                    plainBytes = new byte[iStream.available()];
                    iStream.read(plainBytes);
                } catch (Exception ex) {
                    Logger.getLogger(AppGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(plainBytes.length > 1024)
                {
                    JOptionPane.showMessageDialog(modulePane, "The file seems to be larger than 1 MB.", "",INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void techniqueComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techniqueComboActionPerformed

        String item = techniqueCombo.getSelectedItem().toString();
        decryptedArea.setText("");
        cipherArea.setText("");
        decryptedArea.setEnabled(true);
        cipherLabel.setText("Cipher Text");
        decryptedLabel.setVisible(true);
        decryptedArea.setVisible(true);
        dTimeLabel.setVisible(true);
        dUnitLabel.setVisible(true);
        dTimeField.setVisible(true);
        algoCombo.setEnabled(true);
        switch(item)
        {
            case "Asymmetric":
            algoCombo.setModel(new DefaultComboBoxModel(asym));
            break;
            case "Symmetric":
            algoCombo.setModel(new DefaultComboBoxModel(sym));
            break;
            case "Hash":
            algoCombo.setModel(new DefaultComboBoxModel(hash));
            cipherLabel.setText("Message Digest");
            decryptedLabel.setVisible(false);
            decryptedArea.setEnabled(false);
            decryptedArea.setVisible(false);
            dTimeLabel.setVisible(false);
            dUnitLabel.setVisible(false);
            dTimeField.setVisible(false);
            break;
            default:
            algoCombo.setEnabled(false);
        }
    }//GEN-LAST:event_techniqueComboActionPerformed

    private void algoComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algoComboActionPerformed
        // TODO add your handling code here:
        //algo_used = jComboBox2.getSelectedItem().toString();
    }//GEN-LAST:event_algoComboActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void encLargeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encLargeButtonActionPerformed
        // TODO add your handling code here:
        
        sizeField.setText(""+(float)plainBytes.length/(1024*1024));
        algo_used = algoCombo.getSelectedItem().toString();
        context = new ClassPathXmlApplicationContext("spring.xml");
        algo = (CrypticAlgo)context.getBean(algo_used);
        
        crypt = algo.encrypt(plainBytes);
        eTimeField.setText(""+(float)crypt.time/1000);
        
        plainBytes = null;
        
        crypt = algo.decrypt(crypt.data);
        dTimeField.setText(""+(float)crypt.time/1000);
        
        JOptionPane.showMessageDialog(modulePane, "Encryption Successful", "",INFORMATION_MESSAGE);
    }//GEN-LAST:event_encLargeButtonActionPerformed

    private void asymmetricListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_asymmetricListValueChanged
        // TODO add your handling code here:
       // System.out.println(1);
    }//GEN-LAST:event_asymmetricListValueChanged

    private void symmetricListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_symmetricListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_symmetricListValueChanged

    private void hashListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hashListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_hashListValueChanged
    public void plotGraphEncryption(){
       
        
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Analysis of Algorithm",
                "user load",
                "encryption time",
                collectEncryption,
                PlotOrientation.VERTICAL,
                true,
                true,
                true
        );
        
       try {
           ChartUtilities.saveChartAsJPEG(new File("chartEncrypt.jpg"), chart, 500, 300);
           showImage(encryptLabel, "chartEncrypt.jpg");
       } catch (IOException ex) {
           ex.printStackTrace();
       }
       
       
    }
    
    public void plotGraphDecryption(){
       
        
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Analysis of Algorithm",
                "user load",
                "decryption time",
                collectDecryption,
                PlotOrientation.VERTICAL,
                true,
                true,
                true
        );
        
       try {
           ChartUtilities.saveChartAsJPEG(new File("chartDecrypt.jpg"), chart, 500, 300);
           showImage(decryptLabel, "chartDecrypt.jpg");
       } catch (IOException ex) {
           ex.printStackTrace();
       }
       
       
    }
    
    public void showImage(JLabel label, String imageName) throws IOException{
        BufferedImage image = ImageIO.read(new File(imageName));
        ImageIcon icon = new ImageIcon(image);
        label.setIcon(icon);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        Security.addProvider(new BouncyCastleProvider());
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppGUI().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algoCombo;
    private javax.swing.JLabel algoLabel;
    private javax.swing.JMenuItem analItem;
    private javax.swing.JPanel analPanel;
    private javax.swing.JButton applyButton;
    private javax.swing.JLabel asymLabel;
    private javax.swing.JList asymmetricList;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextArea cipherArea;
    private javax.swing.JLabel cipherLabel;
    private javax.swing.JTextField dTimeField;
    private javax.swing.JLabel dTimeLabel;
    private javax.swing.JLabel dUnitLabel;
    private javax.swing.JLabel decryptLabel;
    private javax.swing.JTextArea decryptedArea;
    private javax.swing.JLabel decryptedLabel;
    private javax.swing.JMenuItem docItem;
    private javax.swing.JTextField eTimeField;
    private javax.swing.JLabel eTimeLabel;
    private javax.swing.JLabel eUnitLabel;
    private javax.swing.JButton encLargeButton;
    private javax.swing.JLabel encryptLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JLabel hashLabel;
    private javax.swing.JList hashList;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenu moduleMenu;
    private javax.swing.JLayeredPane modulePane;
    private javax.swing.JTextArea plainArea;
    private javax.swing.JLabel plainLabel;
    private javax.swing.JButton plotGraphButton;
    private javax.swing.JMenuItem simItem;
    private javax.swing.JPanel simPanel;
    private javax.swing.JTextField sizeField;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JLabel symLabel;
    private javax.swing.JList symmetricList;
    private javax.swing.JComboBox techniqueCombo;
    private javax.swing.JLabel techniqueLabel;
    // End of variables declaration//GEN-END:variables
}
